const en = {
  common: {
    ok: "OK",
    cancel: "Cancel",
    removeAllDlc: "Remove all DLC",
    remove: "Remove",
    errorWithMessage: "Error: {message}",
  },
  buttons: {
    addToLibrary: "Add to library",
    editDlcLibrary: "Edit DLC library",
    removeFromLibrary: "Remove from library",
    loading: "Loading...",
    adding: "Adding...",
    removing: "Removing...",
  },
  errors: {
    manifestMissing: "Manifest not found on public mirrors. Please request manual access.",
    failedAddSelectedDlc: "Failed to add selected DLC.",
    failedInstallBaseGame: "Failed to install the base game.",
    failedFetchInfo: "Failed to fetch game information.",
    failedRemoveGame: "Failed to remove the game!",
  },
  alerts: {
    addingFailedTitle: "Adding failed",
    unableAddTitle: "Unable to add game",
    unableGetDlcTitle: "Unable to get DLC list",
    unableRemoveTitle: "Unable to remove",
    noDlcTitle: "No DLC available",
  },
  messages: {
    changesApplied: "Changes applied.",
    gameAdded: "Game added successfully!",
    gameRemoved: "Game removed successfully!",
    noDlcDetails: "This game has no DLC to install.",
  },
  dialogs: {
    selectDlc: {
      title: "Select DLC to add",
      subtitle: "Select DLC to add. Uncheck any you don't want to add.",
      selectAll: "Select all DLC",
      confirm: "Apply selection",
      alreadyAdded: "already added",
    },
    baseInstall: {
      title: "Add to library",
      message: "This game has no DLC. Do you want to add it to your library?",
      confirm: "Add game",
    },
    restart: {
      title: "Restart Steam",
      message: "{details} Steam needs to restart. Restart now?",
      confirm: "Restart now",
      cancel: "Later",
    },
    remove: {
      title: "Remove from library",
      message: "Are you sure you want to remove this game from your library?",
    },
  },
  labels: {
    dlcWithId: "DLC {id}",
  },
  status: {
    preparing: "Preparing files...",
    downloading: "Downloading manifests...",
    merging: "Merging DLC selections...",
    removing: "Removing from library...",
    success: "All done!",
    failure: "Operation failed.",
  },
  mirrors: {
    title: "Choose download source",
    default: "Public mirror (ManifestHub)",
    maniluaUnderConstruction: "Manilua API (in development)",
    maniluaDisabled: "",
  },
  auth: {
    title: "Manilua API Key",
    instructions: "Enter your Manilua API key. You can obtain it from the Manilua dashboard.",
    placeholder: "manilua_xxxxxxxxxxxxxxxxx",
    example: "Example: manilua_abc123...",
    save: "Save",
    saving: "Saving...",
    required: "API key is required.",
    invalid: "API key is invalid. Please try again.",
    validationFailed: "API key validation failed. Please verify the key and try again.",
    error: "Validation error",
  },
  backend: {
    manifestAlreadyExists: "Manifest already exists",
    manifestNotAvailablePublic: "Manifest for {name} ({appid}) is not available on the public mirrors.",
    manifestNotAvailablePublicNoName: "Manifest for {appid} is not available on the public mirrors.",
    manifestSavedNoJson: "Manifest saved to {target} (no JSON processing)",
    manifestSaved: "Manifest saved to {target}",
    couldNotDetermineAppid: "Could not determine AppID.",
    manifestNotAvailableManilua: "Manifest for {name} ({appid}) is not available via the Manilua mirror. Please check your API key.",
    manifestNotAvailableManiluaNoName: "Manifest for {appid} is not available via the Manilua mirror. Please verify your API key.",
    manifestNotFoundManilua: "Manifest for {name} ({appid}) not found on the Manilua mirror.",
    manifestNotFoundManiluaNoName: "Manifest for {appid} not found on the Manilua mirror.",
    apiKeyRejectedManilua: "API key is rejected by the Manilua mirror. Please check your API key.",
    manifestNotFoundOnMirror: "Manifest for {name} ({appid}) not found on {source} mirror.",
    couldNotDetermineAppidFromMessage: "Could not determine AppID from message.",
    maniluaRequiresApiKey: "The Manilua mirror requires a valid API key.",
    dlcAdded: "Added {count} DLC to {target}.",
    apiKeyNotConfigured: "API key not configured.",
    apiKeyRequired: "API key is required.",
    apiKeyMustStartWith: "API key must start with {prefix}.",
    apiKeyValidationFailed: "API key validation failed.",
    apiKeySaved: "API key saved.",
    unexpectedValidationResponse: "Unexpected response while validating API key.",
    apiKeyInvalid: "API key is invalid.",
    apiKeyRejected: "API key was rejected by the Manilua service.",
    validationRequestFailed: "Validation request failed with HTTP {status}.",
    validationException: "API key validation failed: {error}",
  },
};

export default en;
